---
- name: Gather configuration information from Cisco IOS-XE devices
  hosts: cisco
  gather_facts: false
  become: false
  vars:
    backup_server: backup-server
    ANSIBLE_PERSISTENT_CONNECT_TIMEOUT: 120
  
  tasks:
    - name: Test for basic connection and login to Cisco device
      ansible.builtin.ping:

    - name: Test for basic connection and login to backup server
      delegate_to: "{{ backup_server }}"
      run_once: true
      ansible.builtin.ping:

    - name: Test to see if we can write to the EE (important for ios_config backup)
      delegate_to: localhost
      run_once: true
      block:
        - name: Copy structured network data to EE
          ansible.builtin.copy:
            content: "Ansible Built This"
            dest: "/tmp/ansible_content.txt"
            mode: "644"

        - name: Test to see if the file exists on the EE
          ansible.builtin.command: "cat /tmp/ansible_content.txt"
    ### End block ###

    - name: Test to see if we can write to the RHEL host (backup server)
      delegate_to: "{{ backup_server }}"
      become: true
      run_once: true
      block:
        - name: Create a directory if it does not exist
          ansible.builtin.file:
            path: /backup/
            state: directory
            mode: "755"

        - name: Copy structured network data to host
          ansible.builtin.copy:
            content: "Ansible Built This"
            dest: "/backup/ansible_content.txt"
            mode: "644"

        - name: Test to see if the file exists on the RHEL host
          ansible.builtin.command: "cat /backup/ansible_content.txt"
    ### End block ###

    - name: Test to see if we can do a basic fact gathering from Cisco device
      block:
        - name: Gather network information as structured data
          cisco.ios.ios_facts:
            gather_network_resources:
              - 'all'

        - name: Print out
          ansible.builtin.debug:
            msg: "{{ ansible_network_resources | to_nice_yaml }}"
      ### End block ###

    - name: Test ability to use ios_command
      ignore_errors: true
      vars:
        ansible_command_timeout: 120
      block:
        - name: Most basic ios_command
          cisco.ios.ios_command:
            commands:
              - command: 'sho run'

        - name: Write mem basic ios_command
          cisco.ios.ios_command:
            commands:
              - command: 'write mem'

        - name: Copy running config to startup config with prompt/answer (cisco.ios.ios_command)
          cisco.ios.ios_command:
            commands:
              - command: 'copy run start'
                prompt: Destination
                answer: "\r"

        - name: Copy running config to startup config with prompt/answer (ansible.netcommon.cli_command)
          ansible.netcommon.cli_command:
            command: copy run start
            prompt:
              - Destination
            answer:
              - "\r"
      ### End block ###

    - name: Test ability to use ios_config
      ignore_errors: true
      vars:
        ansible_command_timeout: 120
      block:
        - name: Use IOS Config to save config
          cisco.ios.ios_config:
            save_when: always

        - name: Backup cisco ios configuration
          become: true
          cisco.ios.ios_config:
            backup: true
            backup_options:
              dir_path: /tmp/
              filename: "{{ inventory_hostname }}.txt"
          register: config_output

        - name: Print out config
          when: config_output is defined
          ansible.builtin.command: "cat /tmp/{{ inventory_hostname }}.txt"

        # This task removes the Current configuration... from the top of IOS routers show run
        - name: Remove non config lines - regexp
          when: config_output is defined
          ansible.builtin.lineinfile:
            path: "{{ config_output.backup_path }}"
            line: "Building configuration..."
            state: absent
          delegate_to: localhost

        - name: Create time stamp for play
          delegate_to: "{{ backup_server }}"
          when: config_output is defined
          delegate_facts: true
          run_once: true
          ansible.builtin.set_fact:
            datetime: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M') }}"


        - name: Create a directory if it does not exist
          delegate_to: "{{ backup_server }}"
          when: config_output is defined
          become: true
          run_once: true
          ansible.builtin.file:
            path: /backup/
            state: directory
            mode: "755"

        - name: Save configuration to backup server
          when: config_output is defined
          become: true
          delegate_to: "{{ backup_server }}"
          ansible.builtin.copy:
            src: "{{ config_output.backup_path }}"
            dest: "/backup/{{ hostvars['backup-server'].datetime }}/"
            mode: "644"




